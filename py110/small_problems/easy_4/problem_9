# Write a function that takes two arguments, an inventory item ID and a list of transactions, 
# and returns a list containing only the transactions for the specified inventory item.

# Input: integer and list
# Output: list

# Loop through the transaction list.
# Look for ID key (nested dictionary)
# If ID == integer (item_ID)
# return list

def transactions_for(item_ID, trans_list):
    # item_transactions = []
    # for transaction in trans_list:
    #     for key, value in transaction.items():
    #         if value == item_ID:
    #             item_transactions.append(transaction)
    # print(item_transactions)
    # return item_transactions
    return [transaction for transaction in trans_list if transaction['id'] == item_ID]

    

transactions = [
    {"id": 101, "movement": 'in',  "quantity":  5},
    {"id": 105, "movement": 'in',  "quantity": 10},
    {"id": 102, "movement": 'out', "quantity": 17},
    {"id": 101, "movement": 'in',  "quantity": 12},
    {"id": 103, "movement": 'out', "quantity": 20},
    {"id": 102, "movement": 'out', "quantity": 15},
    {"id": 105, "movement": 'in',  "quantity": 25},
    {"id": 101, "movement": 'out', "quantity": 18},
    {"id": 102, "movement": 'in',  "quantity": 22},
    {"id": 103, "movement": 'out', "quantity": 15},
]

print(transactions_for(101, transactions) ==
      [
          {"id": 101, "movement": "in",  "quantity":  5},
          {"id": 101, "movement": "in",  "quantity": 12},
          {"id": 101, "movement": "out", "quantity": 18},
      ]) # True
