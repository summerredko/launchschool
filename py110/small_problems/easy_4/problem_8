# Write a function that returns a list of all palindromic substrings of a string. 
# Each substring must consist of a sequence of characters that reads the same forward and backward. 
# The substrings in the returned list should be sorted by their order of appearance in the input string. 
# Duplicate substrings should be included multiple times.

# Input: string
# Output: list

# Find all palindrom substrings and return a list ordered by appearance (index). 
# Include any duplicate substrings.

# Data Structures:
#   list
#   dictionary

# Algorithm:
#   Loop over a string with substrings().
#   Generate a list of substrings with leading_substrings()
#   Pass the output list into palindromes() 
#   Loop over each substring in the list.
#   Compare substrings
#   Sort by index


def leading_substrings(string):
    return [string[:idx + 1] for idx in range(len(string))] 

def substrings(string):
    results = []
    for idx in range(len(string)):
        string_at_idx = string[idx:]
        for substring in leading_substrings(string_at_idx): 
            results.append(substring)

    return results

def is_palindrome(word):
    return len(word) > 1 and word == word[::-1]

def palindromes(s):
    return [substring
            for substring in substrings(s)
            if is_palindrome(substring)]

    
print(palindromes('abcd') == [])                  # True
print(palindromes('madam') == ['madam', 'ada'])   # True

print(palindromes('hello-madam-did-madam-goodbye') ==
                  [
                      'll', '-madam-', '-madam-did-madam-',
                      'madam', 'madam-did-madam', 'ada',
                      'adam-did-mada', 'dam-did-mad',
                      'am-did-ma', 'm-did-m', '-did-',
                      'did', '-madam-', 'madam', 'ada', 'oo',
                  ])    # True

print(palindromes('knitting cassettes') ==
                  [
                      'nittin', 'itti', 'tt', 'ss',
                      'settes', 'ette', 'tt',
                  ])    # True
